/*
 * Copyright 2015-2016 Norbert Potocki (norbert.potocki@nort.pl)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ----------- Build script configuration -----------

buildscript {

    ext {
        artifactGroup = "org.cfg4j"
        artifactVersion = "4.4.1"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath group: "com.github.ben-manes", name: "gradle-versions-plugin", version: "0.13.0"
    }
}

// Generate Gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = "3.3"
}

subprojects {

    // ----------- Plugins -----------
    apply plugin: "java"
    apply plugin: "idea"
    apply plugin: "jacoco"
    apply plugin: "maven"
    apply plugin: "signing"
    apply plugin: "com.github.ben-manes.versions"

    // ----------- Repositories -----------
    repositories {
        mavenLocal()
        mavenCentral()
    }

    // ----------- External module dependencies -----------
    dependencies {

        // Logging
        compile group: "org.slf4j", name: "slf4j-api", version: "1.7.22"

        // YAML
        compile group: "org.yaml", name: "snakeyaml", version: '1.17'

        // Metrics
        compile group: "io.dropwizard.metrics", name: "metrics-core", version: "3.1.2"

        testCompile group: "junit", name: "junit", version: "4.12"
        testCompile group: "org.assertj", name: "assertj-core", version: "2.6.0"
        testCompile group: "org.mockito", name: "mockito-core", version: "2.7.1"
        testCompile group: "org.powermock", name: "powermock-api-mockito", version: "1.6.6"
        testCompile group: "org.powermock", name: "powermock-module-junit4", version: "1.6.6"
    }

    // ----------- EXTRA tasks -----------
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

// ----------- Task configurations -----------
    defaultTasks "clean", "build"

    compileJava {
        sourceCompatibility = 1.7
        targetCompatibility = 1.7
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            html.enabled false
        }
    }

    group = "${artifactGroup}"
    version = "${artifactVersion}"

    artifacts {
        archives javadocJar, sourcesJar
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                def ossrhUsername = project.findProperty("ossrhUsername") ?: ""
                def ossrhPassword = project.findProperty("ossrhPassword") ?: ""

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name 'cfg4j'
                    packaging 'jar'
                    description 'Configuration library for Java distributed apps.'
                    url 'http://cfg4j.org'

                    scm {
                        url 'git@github.com:cfg4j/cfg4j.git'
                        connection 'scm:git:git@github.com:cfg4j/cfg4j.git'
                        developerConnection 'scm:git:git@github.com:cfg4j/cfg4j.git'
                    }


                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'norbertpotocki'
                            name 'Norbert Potocki'
                            email 'norbert.potocki@nort.pl'
                        }
                    }
                }
            }
        }
    }


    signing {
        required { gradle.taskGraph.hasTask(":cfg4j-core:uploadArchives") }
        sign configurations.archives
    }

    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(":cfg4j-core:uploadArchives")) {
            Console console = System.console()
            console.printf "\n\nWe have to sign and upload artifacts to Maven Central Repository" +
                    "\n\nPlease enter your credentials.\n\n"

            def signingPassword = console.readPassword("PGP Private Key Password: ")

            allprojects { ext."signing.password" = signingPassword }


            console.printf "\nThanks.\n\n"
        }
    }

}